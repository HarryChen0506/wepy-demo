<style lang="less">
  page {
    width: 100%;
    height: 100%;
  }
  .page-crop {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    // align-items:center;
    // justify-content:center;
    .header {
      height: 14rpx;
      background:rgba(255,255,255,0.5);
    }
    .main {
      box-sizing:border-box;
      border: 4rpx solid #fff;
      position: relative;
      .image-wrap {
        position: absolute;
        left: 0;
        top: 0;
        z-index: -1;
        // transition: all 0.1s linear;
        // transition-property: left, top;
        transition-property: transform;
        transition-duration: 0.2s;
      }
    }
    .footer {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items:center;
      justify-content:center;
      background:rgba(255,255,255,0.5);
      .word {
        font-size:32rpx;
        line-height:44rpx;
        color:#333;
        margin-bottom: 60rpx;
      }
      .button {
        &.generate {
          margin-bottom: 20rpx;
        }
        line-height:44rpx;
        font-size:32rpx;
        padding:22rpx 0rpx;
        border-radius:4rpx;
        text-align: center;
        width:600rpx;
        box-sizing:border-box;
        color:white;
      }
      .red {
        background-color:#FF3366;
      }
      .black {
        background-color:black;
      }
    }
    .canvas-wrap {
      position: fixed;
      left: 0;
      bottom: -2050px;
      z-index: -2;
      opacity: 0;
      visibility: none;
    }
  }
</style>
<template>
  <view class="page-crop">
    <view class="header"></view>
    <view 
      class="main" 
      style="width:{{box.width}}px;height:{{box.height}}px"
      @touchstart="ontouchstart" 
      @touchmove="ontouchmove" 
      @touchend="ontouchend"
    >
      <view class="image-wrap" style="transform: translate({{img.x}}px, {{img.y}}px) scale({{img.userScale}});transition-duration: {{transitionDuration}};">  
        <image src="{{iamgePath}}" bind:load="imageLoad" style="width:{{img.width}}px;height:{{img.height}}px"/>
      </view>      
    </view>  
    <view class="footer">
      <view class="word">调整画面位置</view>
      <view class="button red generate" @tap="generateImage">生成</view>
      <view class="button black" @tap="back">重选</view>
      <!-- <view>
        <view>x:{{img.x}}</view>
        <view>y:{{img.y}}</view>
        <view>width:{{img.width}}</view>
        <view>height:{{img.height}}</view>
        <view>autoScale:{{img.autoScale}}</view>
        <view>userScale:{{img.userScale}}</view>
        <view>offsetX:{{img.offsetX}}</view>
        <view>offsetY:{{img.offsetY}}</view>
      </view> -->
    </view>
    <view class="canvas-wrap">
      <canvas style="width: {{canvas.width}}px; height: {{canvas.height}}px;border: 1px solid #000;" canvas-id="mycanvas" />
    </view>
  </view>  
</template>

<script>
  import wepy from 'wepy'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '裁剪图片'
    }
    components = {
      // panel: Panel,
    }

    mixins = []

    data = {     
      iamgePath: '',
      box: {
        width: wx.getSystemInfoSync().windowWidth,
        height: wx.getSystemInfoSync().windowWidth,
      },
      img: {        
        originWidth: 0, // 图片原始大小
        originHeight: 0,
        autoScale: 1, // 自适应的缩放比
        userScale: 1, // 用户手势后缩放比
        autoX:0,     // 自适应后的x偏移
        autoY:0,
        scale: 1,  // 真实缩放比 （相比原始尺寸）
        autoWidth: 0,
        autoHeight: 0,
        width: 0,  // 变换后的宽
        height: 0, // 变换后的高
        x: 0,  // 与box的X轴偏移
        y: 0,  // 与box的y轴偏移
        offsetX: 0, //图片左上角x实际偏移值
        offsetY: 0, //图片左上角y实际偏移值
      },
      gesture: {
        startX: 0,
        startY: 0,
        zoom: false,
        distance: 0
      },
      transitionDuration: 'o.2s',
      canvas: {
        width: 375,
        height: 375,
        ratio: 1
      }
    }

    computed = {}

    methods = {
      imageLoad (e) {
        const {detail} = e
        this.img.originWidth = detail.width
        this.img.originHeight = detail.height
        console.log('image load', detail)
        // 图片自适应
        this.autoScale()

      },
      ontouchstart (e) {
        // console.log('ontouchstart', e)
        this.transitionDuration = '0s'
        if (e.touches.length === 1) {
          let { clientX, clientY } = e.touches[0]
          this.gesture.startX = clientX
          this.gesture.startY = clientY
          // this.touchStartEvent = e.touches;
          // console.log('gesture-one', this.gesture);
        } else {
          let xMove = e.touches[1].clientX - e.touches[0].clientX
          let yMove = e.touches[1].clientY - e.touches[0].clientY
          let distance = Math.sqrt(xMove * xMove + yMove * yMove)
         
          this.gesture.distance = distance
          this.gesture.zoom = true
          // console.log('gesture-two', this.gesture);
        }
      },
      // ontouchmove: this.throttle( this.touchmove, 1000/100).bind(this),
      ontouchmove: this.touchmove,
      ontouchend (e) {
        // console.log('ontouchend', e)        
        if (e.touches.length === 0) {
          const {gesture, img, box} = this          
          const scale = img.scale
          // 如果小于自动缩放时，则还原
          if (img.userScale < 1) {
            // img.scale = img.autoScale
            // let diffScale = img.autoScale - scale
            // img.width = img.scale * img.originWidth
            // img.height = img.scale * img.originHeight
            // img.x = img.autoX
            // img.y = img.autoY
            img.userScale = 1
            // 位移使图片居中
            img.x = img.autoX
            img.y = img.autoY
          }
          // 如果移动超出边界 则还原
          if(!gesture.zoom){
            if (img.offsetX > 0) {
              img.x = 0 - (1 - img.userScale) * img.width * 0.5
              img.offsetX = 0
            } 
            if (img.offsetY > 0) {
              img.y = 0 - (1 - img.userScale) * img.height * 0.5
              img.offsetY = 0
            } 
            if (box.width - img.width * img.userScale > img.offsetX ) {
              img.x = (box.width - img.width * img.userScale) - (1 - img.userScale) * img.width * 0.5
              img.offsetX = (box.width - img.width  * img.userScale)
            }
            if (box.height - img.height * img.userScale > img.offsetY ) {
              img.y = (box.width - img.height * img.userScale) - (1 - img.userScale) * img.height * 0.5
              img.offsetY = (box.width - img.height  * img.userScale)
            }           
          }          
          //重置缩放状态
          this.transitionDuration = '0.2s'
          gesture.zoom = false 
        }
        console.log('end', this.img)
      },
      generateImage () {
        wx.showLoading({
          title: "正在生成图片",
          mask: true,
        })
        this.createCanvas()
      },
      back () {
        wx.navigateBack({url: `/pages/versa`})
      }
    }

    events = {
      
    }

    onLoad() {
      const {globalData} = this.$parent
      const demo = [
        "http://tmp/wx21630a5d4651096a.o6zAJsztn2DIgXEGteELseHpiOtU.NKidKasfEbMa5fa447cdf99ebe9bdfaff42b8dee3019.jpg",
      ]
      this.iamgePath = globalData.choosedImagePath || demo[0]
      // console.log('choosedImagePath', globalData)
      // console.log('wx.getSystemInfoSync().windowWidth', wx.getSystemInfoSync())
      // 计算canvas尺寸
      const { pixelRatio = 2 } = wx.getSystemInfoSync() || {}
      const {img, box, canvas} = this
      canvas.ratio = pixelRatio
      canvas.width = pixelRatio * box.width
      canvas.height = pixelRatio * box.height
    }
    // 自适应图片
    autoScale () {
      // 获取图片原始大小
      const {originWidth, originHeight} = this.img
      const boxWidth = this.box.width
      const minSize = Math.min(originWidth, originHeight)
      const autoScale = boxWidth / minSize
      console.log('auto-scale', autoScale)
      this.img.width = this.img.autoWidth = originWidth * autoScale
      this.img.height = this.img.autoHeight = originHeight * autoScale
      this.img.scale = this.img.autoScale = autoScale
      // 位移使图片居中
      this.img.x -= (originWidth*autoScale - boxWidth) * 0.5
      this.img.y -= (originHeight*autoScale - boxWidth) * 0.5
      this.img.autoX = this.img.x
      this.img.autoY = this.img.y
      this.img.offsetX = this.img.x
      this.img.offsetY = this.img.y
    }
    touchmove (e) {
      // console.log('ontouchmove', e)
      if (e.touches.length === 1) {
        //单指移动
        if (this.gesture.zoom) {
          //缩放状态，不处理单指
          return;
        }
        const {gesture, img} = this
        let { clientX, clientY } = e.touches[0];
        let offsetX = clientX - gesture.startX;
        let offsetY = clientY - gesture.startY;
        gesture.startX = clientX;
        gesture.startY = clientY;

        img.x += offsetX
        img.y += offsetY
        img.offsetX += offsetX
        img.offsetY += offsetY
      } else {
        //双指缩放
        const {gesture, img} = this
        let xMove = e.touches[1].clientX - e.touches[0].clientX;
        let yMove = e.touches[1].clientY - e.touches[0].clientY;
        let distance = Math.sqrt(xMove * xMove + yMove * yMove);
        
        // 计算新的缩放比
        let distanceDiff = distance - gesture.distance;
        let diffScale =  0.004 * distanceDiff
        let newScale = img.userScale + diffScale;
        if (newScale * img.width < 100) {
          return 
        }
        // let newWidth = newScale * img.originWidth;
        // let newHeight = newScale * img.originHeight;
        // console.log('newWidth', newWidth, 'newHeight', newHeight)

        gesture.distance = distance
        img.userScale = newScale          
        // img.width = newWidth
        // img.height = newHeight
        // 位移变化。使放大中心为图片中心
        // img.x = img.x - diffScale * img.originWidth *0.5 
        // img.y = img.y - diffScale * img.originHeight *0.5 
        img.offsetX = img.width * (1 - img.userScale) * 0.5 + img.x
        img.offsetY = img.height * (1 - img.userScale) * 0.5 + img.y
      }
    }
    // 函数截留
    throttle(func, deltaX) {
      let lastCalledAt = new Date().getTime();
      let that = this;
      return function(e) {
        if(new Date().getTime() - lastCalledAt >= deltaX) {
            func.apply(that, arguments);
            lastCalledAt = new Date().getTime();
        }
      }
    }
    // 生成canvas
    createCanvas () {
      const _this = this;
      const {img, box, canvas} = this;
      const choosedImagePath = this.iamgePath;
      const context = wx.createCanvasContext('mycanvas');
      const { ratio } = canvas
      const {width, height, offsetX, offsetY, userScale} = img

      //防止锯齿，绘的图片是所需图片的两倍
      context.drawImage(choosedImagePath, offsetX * ratio, offsetY * ratio, width * userScale * ratio, height * userScale * ratio);

     
      //绘制图片
      context.draw();

      //将生成好的图片保存到本地，需要延迟一会，绘制期间耗时
      setTimeout(function () {
        wx.canvasToTempFilePath({
          canvasId: 'mycanvas',
          success: function (res) {
            let tempFilePath = res.tempFilePath;
            console.log('tempFilePath', tempFilePath);
            const {globalData} = _this.$parent
            globalData.cropedImagePath = tempFilePath
            console.log('globalData', _this.$parent.globalData)
            // 跳转裁剪后页面
            wx.hideLoading()
            // wx.navigateTo({url: `/pages/waiting`})
            wx.redirectTo({url: '/pages/waiting'})
          },
          fail: function (res) {
            console.log(res);
          },
          complete:function(e){
            // wx.hideLoading();
          }
        });
      }, 200);

    }
  }
</script>
