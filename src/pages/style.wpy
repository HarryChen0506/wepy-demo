<style lang="less">
  page {
    width: 100%;
    height: 100%;
  }
  .page-style {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    .header {
      width: 100%;
      height: 100vw;
      position: relative;
      margin-bottom: 10px;
      .image-wrap {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        image {
          width: 100%;
          height: 100%;
          position: absolute;
          top: 0;
          left: 0;
        }
      }
    }
    .main {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items:center;
      justify-content:space-around;   
      // justify-content:center;   
      .type-wrap {
        display: flex;
        align-items:center;
        justify-content:center;   
      }
      .style-wrap {
        width: 100%;
        height: 160rpx;
        padding: 0 40rpx;
        box-sizing: border-box;
        .scroll {
          width: 100%;
          height: 100%;
          white-space: nowrap; 
          display: flex;
          .random-wrap {
            display: inline-block;
          }
        }
      }
      .share-wrap {
        display: flex;
      }
    }
    .footer {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items:center;
      justify-content:center;
    }
    .button {
      width:320rpx;
      height: 80rpx;
      line-height: 80rpx;
      color:white;
      text-align: center;
      border-radius:2px;
      font-size:32rpx;
      &.red {
        background-color:#FF3366;
      }
      &.black {
        background-color:#000;
      }
    }
  }
</style>
<template>
  <view class="page-style">
    <view class="header">
      <view class="image-wrap">
        <image class="origin-class" src="{{originIamgePath}}"/>
        <image class="style-image"  wx-if="{{imageType === 'style-segment'}}"  src="{{styleSegmentPath}}"/>
        <image class="style-image"  wx-if="{{imageType === 'style-unsegment'}}"  src="{{styleUnsegmentPath}}"/>
      </view>
      <view class="loading-wrap">
      </view>
    </view>
    <view class="main" wx:if="{{!showResult}}">
      <view class="type-wrap">
        <view wx-if="{{hasSegmentButton}}">
          <typebuttonsegment 
            @typeChange.user="onChangeType"
            :model.sync="segmentType"
            type="segmentType"
            selectedTitle="人景-分离-"
            unSelectedTitle="人景分离"
          >
            <image slot="selectedIcon" mode="scaleToFill" src="../assets/images/segment-icon.png" style="width:48rpx; height:48rpx"></image>
            <image slot="unSelectedIcon" mode="scaleToFill" src="../assets/images/unsegment-icon.png" style="width:48rpx; height:48rpx"></image>
          </typebuttonsegment>
        </view>
        <view style="margin-left: 40rpx">
          <typebuttoncolor 
            @typeChange.user="onChangeType"
            :model.sync="colorType"
            type="colorType"
            selectedTitle="风格色"
            unSelectedTitle="原色"
          >
            <image slot="selectedIcon" mode="scaleToFill" src="../assets/images/color-icon.png" style="width:48rpx; height:48rpx"></image>
            <image slot="unSelectedIcon" mode="scaleToFill" src="../assets/images/rawcolor-icon.png" style="width:48rpx; height:48rpx"></image>
          </typebuttoncolor> 
        </view>       
               
      </view>
      <view class="style-wrap">
        <scroll-view 
          class="scroll"
          scroll-x='true' 
        > 
          <view class="random-wrap">
            <randomStyle 
              :selectButtonType.sync="selectButtonType"
              :randomSelectThumbnailUrl.sync="selectButtonThumbnailUrl"
              :randomSelectTitle.sync="selectStyleTitle"
              :randomSelectStatus.sync="randomSelectStatus"
              @randomButton.user="onRandomSelect"
            ></randomStyle>
          </view>  
          <repeat for="{{filterTagList}}" index="index" item="tag" key="key">
            <styleTag 
              :tag.sync="tag"
              :index.sync="index"
              @styleChange.user="onStyleChange"
            ></styleTag>
          </repeat>  
        </scroll-view>
      </view>
      <view class="share-wrap">        
        <view class="button black">保存至相册</view>
        <view class="button red" style="margin-left: 20rpx">分享</view>
        <!-- <button @tap="onChooseStyle">自己选风格</button> -->
        <!-- <text>当前风格：{{currentStyle.title}}</text> -->
      </view>
    </view>
    <view class="footer" wx:if="{{showResult}}">分享结果</view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import {styleTransfer, base} from '../services/service.js'
  import typeButton from '../components/transfer/typeButton/index'
  import randomStyle from '../components/transfer/randomStyle/index'
  import styleButton from '../components/transfer/styleButton/index'
  import styleTag from '../components/transfer/styleTag/index'
  const mock = {
    selectButtonThumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b4157f95-3678-4b43-a632-4de5b15f7d46.jpeg?x-oss-process=image/resize,h_200',
    selectStyleTitle: '田野的风',
    groupList: [{
      styleId: 12,
      thumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b4157f95-3678-4b43-a632-4de5b15f7d46.jpeg?x-oss-process=image/resize,h_200',
      title: '田野的风'
    },{
      styleId: 15,
      thumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b2040e7e-78e5-413a-afd9-7916b644d637.jpeg?x-oss-process=image/resize,h_200',
      title: '三月'
    }],
    tagList: [{
      id: 12,
      tagCode:"recommend",
      tagName: "推荐",
      tagOrder: 1,
      tagUrl: "http://static01.versa-ai.com/upload/prod/image/localization/f6d4385d-15e1-45aa-871d-767bd4cf496c.jpg",
      styleList: [{
        styleId: 12,
        thumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b4157f95-3678-4b43-a632-4de5b15f7d46.jpeg?x-oss-process=image/resize,h_200',
        title: '田野的风'
      },{
        styleId: 15,
        thumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b2040e7e-78e5-413a-afd9-7916b644d637.jpeg?x-oss-process=image/resize,h_200',
        title: '三月'
      }]
    },{
      id: 28,
      tagCode:"watercolor",
      tagName: "水彩",
      tagOrder: 2,
      tagUrl: "http://static01.versa-ai.com/upload/prod/image/localization/9b5ba6f8-e413-4823-bf69-97107a44184b.jpg",
      styleList: [{
        styleId: 45,
        thumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b4157f95-3678-4b43-a632-4de5b15f7d46.jpeg?x-oss-process=image/resize,h_200',
        title: '测试的风'
      },{
        styleId: 46,
        thumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b2040e7e-78e5-413a-afd9-7916b644d637.jpeg?x-oss-process=image/resize,h_200',
        title: '测试的月'
      },{
        styleId: 47,
        thumbnailUrl: 'http://static01.versa-ai.com/upload/prod/image/style/b2040e7e-78e5-413a-afd9-7916b644d637.jpeg?x-oss-process=image/resize,h_200',
        title: '测试的月444'
      }]
    }]
  }
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '风格渲染'
    }
    components = {
      typebuttonsegment: typeButton,
      typebuttoncolor: typeButton,
      randomStyle: randomStyle,
      styleButton: styleButton,
      styleTag: styleTag
    }

    mixins = []

    data = {      
      hasSegmentButton: true,
      colorType: true,
      segmentType: false,
      showResult: false,
      imageType: '', // 'style-unsegment' 'raw-segment' 'raw-unsegment' 'style-segment'
      originIamgePath: 'http://tmp/wx21630a5d4651096a.o6zAJsztn2DIgXEGteELseHpiOtU.1pt6jtQ6MgIb779bd49c491911729629c3064e1cb5f0.png',
      styleSegmentPath: 'http://static01.versa-ai.com/images/render/render_1528254108192_1528254180.0760357.jpg',
      styleUnsegmentPath: 'http://static01.versa-ai.com/images/render/blend_1528254108192_1528254180.3011894.jpg',

      selectButtonType: 'random', // 选择按钮类型
      selectButtonThumbnailUrl: '', // 风格缩略图
      selectStyleTitle: '', // 风格主题
      selectStatus: 'null', // 风格结果 'success' 'fail' 'null' 'loading'
      randomSelectStatus: 'null', // 随机按钮结果 'success' 'fail' 'null' 'loading'

      tagCanUseList: [12, 29, 27, 28, 33, 32, 31,30, 34],
      originTagList: [],
      originStyleList: [],
      filterTagList: [],
      currentStyle: {}
    }

    computed = {}

    watch = {
      // originTagList (newValue, oldValue) {
      //   console.log(`originTagList value: ${oldValue} -> ${newValue}`)
      // }
    }

    methods = {
      onChangeType (type) {
        console.log('type', type)
        if (type === 'colorType') {
          this.colorType = !this.colorType
        } else if (type === 'segmentType') {
          this.segmentType = !this.segmentType
        }        
      },
      onRandomSelect () {
        console.log('随机选择')        
        this.randomSelectStatus = 'loading'
        this.selectButtonType = 'random'
        setTimeout(() => {
          this.selectButtonThumbnailUrl = mock['selectButtonThumbnailUrl']
          this.selectStyleTitle = mock['selectStyleTitle']
          this.randomSelectStatus = this.selectStatus = 'success'
          this.$apply()
        }, 2000);
      },
      onChooseStyle () {
        console.log('指定选择')
        this.selectButtonType = 'choose'
        this.randomSelectStatus = ''
        this.selectStatus = 'loading'
        setTimeout(() => {
          this.selectButtonThumbnailUrl = mock['selectButtonThumbnailUrl']
          this.selectStyleTitle = mock['selectStyleTitle']
          this.selectStatus = 'success'
          this.$apply()
        }, 2000);
      },
      onStyleChange (item) {
        // console.log('page receive event: change style', item)
        this.currentStyle = item;
        // 广播事件
        this.$broadcast('setCurrentStyle', this.currentStyle)
      }
    }

    events = {
      
    }

    onLoad() {
      // console.log('onload-index')
      this.getListData()
    }

    async getListData () {
      const {globalData} = this.$parent
      if (!globalData.styleList) {
        try {
          const styleList = await styleTransfer.styleList()
          globalData.styleList = styleList.result
        } catch (err) {
          console.log('catch-error: get styleList fail', err)
        }        
      }
      if (!globalData.tagList) {
        try {
          const tagList = await styleTransfer.tagList()
          globalData.tagList = tagList.result && tagList.result.featureTagVoList
        } catch (err) {
          console.log('catch-error: get tagList fail', err)
        }       
      }   
      this.originTagList = globalData.tagList || []
      this.originStyleList = globalData.styleList || []
      this.filterTagList = this.calFilterTagList() || []
      if (this.filterTagList[0]) {
        this.filterTagList[0].show = true
      }
      this.$apply()
      console.log('测试-globalData', this)
    }

    // 计算变换后的taglist
    calFilterTagList () {
      return this.tagCanUseList.map(v => {
        const tag = this.originTagList.find(k => {
          // console.log(k, v)
          return k.id == v
        })
        if (tag && tag.detailIdList) {
          tag.styleList = []
          tag.detailIdList.forEach(l => {
            const style = this.originStyleList.find(j => {
              return j.detailId == l
            })
            if (style) {
              tag.styleList.push(style)
            }              
          })
        }          
        return tag
      })
    }

  }
</script>
