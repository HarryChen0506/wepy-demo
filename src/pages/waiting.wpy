<style lang="less">
  page {
    width: 100%;
    height: 100%;
  }
  .page-waiting {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    // align-items:center;
    // justify-content:center;
    .main {
      width: 100%;
      height: 100vw;
      position: relative;
      overflow: hidden;
      .image {
        width: 100%;
        height: 100vw;
      }
      .loading-wrap {
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%; 
        .bg {
          position: absolute;
          top:0;
          left:0;
          z-index: 1;
          width: 100%;
          height: 100%;
          background: rgba(220, 220, 220, 0.5);
        }
        .loading {
          position: absolute;
          top:0;
          left:0;
          z-index: 2;
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items:center;
        }
        .loading-text {
          margin-top: 20rpx;
          font-size: 30rpx;
          color:#333;
          font-family:'PingFangSC-Regular';
        }
      }
    }
    .footer {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items:center;
      justify-content:center;
      background:rgba(255,255,255,0.5);
      
      .button {
        &.rechoose {
          margin-bottom: 20rpx;
        }
        line-height:44rpx;
        font-size:32rpx;
        text-align: center;
        padding: 22rpx 0;
        border-radius:4rpx;
        width:600rpx;
        box-sizing:border-box;
        color:white;
      }
      .red {
        background-color:#FF3366;
      }
    }
    .blur {
      filter: blur(10px);
    }
  }
</style>
<template>
  <view class="page-waiting">
    <view class="main">
      <image class="image {{loading?'blur':''}}" src="{{iamgePath}}"/>
      <view class="loading-wrap" wx-if="{{loading}}">
        <view class="bg"></view>
        <view class="loading">
          <loading></loading>
          <text class="loading-text">正在渲染中...</text>
        </view>        
      </view>
    </view>  
    <view class="footer">
      <view class="button red rechoose" @tap="back">重选照片</view>
      <view class="button red rechoose" @tap="show">show</view>
      <view class="button red rechoose" @tap="hide">hide</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import tool from '../utils/tool.js'
  import {styleTransfer, base} from '../services/service.js'
  import {cacheStyle} from '../services/cache.js'
  import loading from '../components/transfer/loading/index'
  // 计算风格标签数组
  const calFilterTagList = function (tagCanUseList = [], originTagList = [], originStyleList = []) { 
    originTagList = tool.deepClone(originTagList)
    originStyleList = tool.deepClone(originStyleList)
    const newTagList = originTagList.filter(v => {
      return tagCanUseList.indexOf(v.id) > -1
    })
    newTagList.forEach(v => {
      // v.tagCode = ''
      // v.tagName = ''
      // v.tagOrder = ''
      v.styleList = []
      v.detailIdList.forEach(id => {
        let style = originStyleList.filter(k => {
          return k.detailId === id
        })[0]
        if (style) {
          const {backgroundUrl, brushAnimation, detailId, name, stylePicUrl} = style
          const newStyle = {backgroundUrl, brushAnimation, detailId, name, stylePicUrl}
          v.styleList.push(newStyle)
        }    
      })  
    })
    return newTagList
  }
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'waiting'
    }
    components = {
      loading: loading
    }

    mixins = []

    data = {     
      iamgePath: '',
      loading: false,
      tagCanUseList: [12, 29, 27, 28, 33, 32, 31,30, 34, 1],
      cropedImagePath: '',
      renderStatus: 'init'
    }

    computed = {
      // now () {
      //   return +new Date()
      // }
    }

    methods = {
      back () {
        console.log('back')
      },
      async show () {
        this.onShowLoading()
        await this.getTagList()
        await this.randomRender()
        this.onHideLoading()
        wx.navigateTo({url: `/pages/style`})
      },
      hide () {
        this.onHideLoading()
      }
    }

    events = {
      
    }

    async onLoad() {
      const {globalData} = this.$parent
      const demo = [
        'http://tmp/wx21630a5d4651096a.o6zAJsztn2DIgXEGteELseHpiOtU.1pt6jtQ6MgIb779bd49c491911729629c3064e1cb5f0.png',
        // "http://tmp/wxc41d9fc2cdd02cf2.o6zAJsztn2DIgXEGteELseHpiOtU.Qmgo9peaAA1t62c018bbd5dd1595e8f1509d5a1c0e6f.jpg",
        // "http://tmp/wxc41d9fc2cdd02cf2.o6zAJsztn2DIgXEGteELseHpiOtU.Jwh7Vhois7gx5fa447cdf99ebe9bdfaff42b8dee3019.jpg"
      ]
      this.iamgePath = globalData.cropedImagePath || demo[0]
      // this.iamgePath =  demo[0]
      console.log('globalData', globalData)
      // this.segment(this.iamgePath, 64)
    }
    onShowLoading () {
      this.loading = true
      this.$invoke('loading', 'onShow');
    }
    onHideLoading () {
      this.loading = false
      this.$invoke('loading', 'onHide');
    }

   
    async getTagList () {
      const {globalData} = this.$parent
      if (!globalData.styleList) {
        try {
          const styleList = await styleTransfer.styleList()
          globalData.styleList = styleList.result
        } catch (err) {
          console.log('catch-error: get styleList fail', err)
        }        
      }
      if (!globalData.tagList) {
        try {
          const tagList = await styleTransfer.tagList()
          globalData.tagList = tagList.result && tagList.result.featureTagVoList
        } catch (err) {
          console.log('catch-error: get tagList fail', err)
        }       
      }  
      globalData.filterTagList = calFilterTagList(this.tagCanUseList, globalData.tagList, globalData.styleList) || []
    }

    // 随机处理
    async randomRender () {
      // console.log('randomRender')    
      const {globalData} = this.$parent
      const {filterTagList = [], cropedImagePath = ''} = globalData
      // 获取图片
      const randomTagIndex = tool.createRandom(0, filterTagList.length -1)
      const randomStyleIndex = tool.createRandom(0, filterTagList[randomTagIndex].styleList.length - 1)
      const currentStyle = filterTagList[randomTagIndex].styleList[randomStyleIndex]
      console.log('随机选择后的当前风格', currentStyle)
      globalData.renderResult = await this.segment(cropedImagePath, currentStyle.detailId)
      globalData.currentStyle = currentStyle
      console.log('globalData', globalData)
    }

     // 渲染服务
    async segment (localImgPath, styleId) {      
      // 判断是否在缓存里
      const cacheKey = `${localImgPath}_styleId_${styleId}`
      if (cacheStyle.get(cacheKey)) {
        console.log('get-cache', cacheKey, cacheStyle.get(cacheKey))
        return cacheStyle.get(cacheKey)
      }
      // 先上传到静态服务器
      let remoteImageUrl = ''
      // 判断是否有远程图片地址
      const cacheRemoteUrlKey = `${localImgPath}_remoteUrl`
      if (cacheStyle.get(cacheRemoteUrlKey)) {
        remoteImageUrl = cacheStyle.get(cacheRemoteUrlKey)
      } else {
        try {
          const {url} = await base.upload(localImgPath)
          remoteImageUrl = cacheStyle.set(cacheRemoteUrlKey, url)
        } catch (err) {
          console.log('上传图片失败', err)
        }
      } 

      // 最后进行风格迁移
      let allSegmentData = []
      try {
        this.renderStatus = 'loading'
        allSegmentData = await styleTransfer.allSegment(remoteImageUrl, styleId)
      } catch (err) {
        console.log('风格迁移失败', err)
        this.renderStatus = 'fail'
        return 
      }
      
      function hasSegmentButton (data) {
        return data.result.renderUrl !== data.result.targetUrl
      }
      console.log('set-cache')
      return cacheStyle.set(cacheKey, {
        color: allSegmentData[0].result,
        raw: allSegmentData[1].result,
        hasSegmentButton: hasSegmentButton(allSegmentData[0])
      })
    }

  }
</script>
